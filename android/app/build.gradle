def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def dartEnvironmentVariables = [
        CUSTOM_ENV: 'dev',
];

if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.flutter_template"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }

        applicationVariants.all {
                // this methid is use to rename your all apk weather
                // it may be signed or unsigned(debug apk)
            variant ->
                variant.outputs.all {
                    output ->
                        // on below line we are specifying our app name.
                        project.ext { appName = 'Flutter Template' }
                        // on below line we are adding the formatted date to our apk file name.
                        def formattedDate = new Date().format('yyyy-MM-dd HH-mm')
                        // on below line we are creating a new name for our apk.
                        def newName = output.outputFile.name
                        // on below line we are replacing our previous name with our app name.
                        newName = newName.replace("app-", "$project.ext.appName-$dartEnvironmentVariables.CUSTOM_ENV-")
                        // on below line we are replacing -debug with our formatted date.
                        newName = newName.replace("-debug", "-debug-" + formattedDate)
                        // on below line we are replacing -release with our formatted date.
                        newName = newName.replace("-release", "-release-" + formattedDate)
                        // at last we are setting our apk name to it.
                        output.outputFileName = newName
                }
        }
    }

    flavorDimensions "app"

    productFlavors {
        dev {
            dimension "app"
            resValue "string", "app_name", "Flutter Template Dev"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }

        stage {
            dimension "app"
            resValue "string", "app_name", "Flutter Template Stage"
            applicationIdSuffix ".stage"
            versionNameSuffix "-stage"
        }

        prod {
            dimension "app"
            resValue "string", "app_name", "Flutter Template"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
